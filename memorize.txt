存储{非完全关联逻辑存储
逻辑和存储信息整理与混乱存储
截断存储
冗余存储
关联附加存储
存储编码规则和编译后的代码
存储指令和源文件}


推理{异步模块推理
异步推理合并
即时编译
即时翻译
动态对比
少种机器码}


analysis & explains
存储{
存储指令和源文件
  这个在命名模式上选择的是机器模式。
  在机器上，尤其是在压缩领域我们可以采用此类方式进行压缩以提高压缩比，可以作为一个研究方向，比如我们将要存储，59049，这个数字，如何存储，似乎对于机器并不难。对于机器来说存储主要偏向于压缩，对于人类来说，则主要偏向于记忆和压缩。对于人类来说相对困难的记忆则显得并不是那么难，甚至对于机器来说存储甚至不需要压缩都会高效。
假设你知道，3 ^ 10 =
59049，那么当一个人给你了一串数字，比如67859049，那么你就可以记成  
6开始，连续三个，紧接着的数字是3 ^ 10。
这个记忆就具备很高的防错性，不信你可以试试。当然，不足之处是，你需要重新计算3^10，不过优点是你可以很好的记忆住你需要记住的这串数字。对于计算机来说，记忆67859049并不是一件很难的事情，那么对于这种模式的作用则可以转为
加密和压缩。一个简单的压缩的例子是将其压缩为
678-3^10-,很不幸的是相对于原文本，对于这个文本这种压缩模式压缩后反而增大了文件的大小。
简单数字式设计压缩器:【
基于指数压缩法的字典，存储了1-1000的1的1-1000次方的键和值。
对原文本解释为
纯文本后进行分析，如果有些连续的数字符合字典中的值，判别如果压缩后的一段文本的大小小小于原来的那一段的文本，就执行压缩。】
解压器【
识别-3^10-类似的待计算文本，这段文本以-开始，以-结束
计算后替换原文本
解压器中需要包含计算组件
】
完善:[
对于非数字式压缩解压器，添加转义代码如\-解释为-而非待计算文本的开始，\\解释为\而非转义代码的开始
]
设计缺点{
毫无疑问，这种设计的缺点是即为致命的，事实上并不能作为通用压缩和解压，一方面是效率问题，添加计算模块会增加很多工作量，会严重拖慢解压速度，对于压缩来说，需要遍历多次原文本，极为耗时。将其扩展为，unicode文本时则会降低压缩的效用。
}
设计优点{
看似压缩实则加密，改良后可以用为加密领域。尤其是扩展在unicode文本，用作加密改良器。附加于常用加密器之上，额外添加加密层。
}
上面的关于压缩和解压的例子仅仅是一个参考的例子，事实上，我们常用的指令可比这多一些。比如镜像，顺序（数列），旋转，重复等等。我们通过学习，可以渐渐熟练的应用各种指令。
用在完全模拟人工智能机器设计上，可以作为参考的一种设计模式。
}
存储{
  存储编码规则和编译后的代码
  事实上，这个是存储指令和源文件 的另外一种偏向于 人类内在的运作模式。对于人类来说，推演规则就可以被我们用于存储记忆，而这可以用来学习新的记忆，以及新的推理。？那么这些推演规则的最初规则是什么？
当嵌套多层时会显著降低效率吗？
对于人类来说，学习是建立在不断地推演和公理上的。
}
